name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-22.04

    container:
      image: jbeirer/alma9-fastcalosim:latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install codespell
      run: python3 -m ensurepip --default-pip
        && pip3 install codespell

    - name: Install clang-format
      run: dnf update -y 
        && dnf install -y clang-tools-extra
      
    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    container:
      image: jbeirer/alma9-fastcalosim:latest

    if: github.repository_owner == 'jbeirer'

    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: dnf update -y 
        && dnf install -y lcov

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    container:
      image: jbeirer/alma9-fastcalosim:latest

    steps:

    - uses: actions/checkout@v4

    - name: Install sanitizers
      run: dnf update -y 
        && dnf install -y clang-tools-extra libasan libubsan

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
      needs: [lint]
      runs-on: ubuntu-22.04

      strategy:
        matrix:
          os: [alma9, ubuntu22]

      container:
        image: jbeirer/${{ matrix.os }}-fastcalosim:latest

      steps:
      - uses: actions/checkout@v4
        
      - name: Install static analyzers for Ubuntu 22.04 
        if: matrix.os == 'ubuntu22'
        run: >-
          apt-get update -q
          && apt-get install lsb-release wget software-properties-common gnupg -q -y
          && wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh
          && ./llvm.sh 16
          && apt-get install clang-tidy-16 cppcheck -y -q

          update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-16 160

      - name: Install static analyzers for AlmaLinux 9
        if: matrix.os == 'alma9'
        run: >-
          dnf update -y 
          && dnf install clang-tools-extra cppcheck -y -q

      - name: Configure
        run: cmake "--preset=ci-ubuntu"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'jbeirer'
      && false

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: apt-get update -q
        && apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
