name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-24.04

    container:
      image: jbeirer/alma9-fastcalosim:latest

    steps:
    - uses: actions/checkout@v4

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-24.04

    container:
      image: jbeirer/alma9-fastcalosim:latest

    if: github.repository_owner == 'jbeirer'

    steps:
    - uses: actions/checkout@v4

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}

  sanitize:
    needs: [lint]

    runs-on: ubuntu-24.04

    container:
      image: jbeirer/alma9-fastcalosim:latest

    steps:

    - uses: actions/checkout@v4

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Install
      run: cmake --install build/sanitize --config Release --prefix prefix

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2 || true # For now we ignore sanitizer errors

  test:
    needs: [lint]
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        os: [alma9, ubuntu24]

    container:
      image: jbeirer/${{ matrix.os }}-fastcalosim:latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure
      run: cmake "--preset=ci-ubuntu"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

    - uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.os }}
        path: test/output
        if-no-files-found: error
        retention-days: 90

  # Test against LCG releases
  test_lcg:
    needs: [lint]
    env:
      views_path: /cvmfs/sft.cern.ch/lcg/views
      platform: x86_64-el9-gcc13-opt
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # See https://lcginfo.cern.ch/ for info on available LCG releases
        lcg: [LCG_106]
    steps:
      - uses: actions/checkout@v4
      - uses: cvmfs-contrib/github-action-cvmfs@v4
      - uses: aidasoft/run-lcg-view@v4
        with:
          release-platform: "${{matrix.lcg}}/${{env.platform}}"
          run: |
            echo "::group::Set-up Python environment"
            mkdir -p ~/.local/bin
            export PATH=~/.local/bin:"${PATH}"
            curl -sL https://raw.githubusercontent.com/jbeirer/cvmfs-venv/main/cvmfs-venv.sh -o ~/.local/bin/cvmfs-venv
            chmod +x ~/.local/bin/cvmfs-venv
            cvmfs-venv lcg-venv && . lcg-venv/bin/activate

            echo "::group::Install Python test dependencies"
            pip install --user pipreqs
            pipreqs test/python --mode no-pin
            pip install --user -r test/python/requirements.txt

            echo "::group::Configure"
            cmake "--preset=ci-lcg"

            echo "::group::Build"
            cmake --build build --config Release -j 2

            echo "::group::Install"
            cmake --install build --config Release --prefix prefix

            echo "::group::Test"
            ctest --test-dir build --output-on-failure --no-tests=error -C Release -j 2

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.lcg }}
          path: test/output
          if-no-files-found: error
          retention-days: 90

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'jbeirer'

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install ghostscript doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
